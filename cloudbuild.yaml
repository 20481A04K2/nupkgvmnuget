steps:
  # Step 0: Generate version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $VERSION_TAG"

  # Step 1: Pack .nupkg from existing LibA, LibB, LibC
  - name: 'mcr.microsoft.com/dotnet/sdk:6.0'
    id: 'Pack Libraries'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        mkdir -p output
        for lib in LibA LibB LibC; do
          dotnet restore $lib/$lib.csproj
          dotnet pack $lib/$lib.csproj -o ./output/ --version-suffix "$VERSION_TAG"
        done

  # Step 2: Create Artifact Registry if not exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe nupkgvmnuget --location=us-central1 --project=onyx-antler-459216-j6; then
          gcloud artifacts repositories create nupkgvmnuget \
            --repository-format=generic \
            --location=us-central1 \
            --project=onyx-antler-459216-j6
        fi

  # Step 3: Upload .nupkg to Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload .nupkg Files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        for lib in LibA LibB LibC; do
          PKG_FILE=$(ls output/$lib.*.nupkg)
          gcloud artifacts generic upload \
            --project="onyx-antler-459216-j6" \
            --location="us-central1" \
            --repository="nupkgvmnuget" \
            --package="$lib" \
            --version="$VERSION_TAG" \
            --source="$PKG_FILE"
        done

  # Step 4: Publish Applications
  - name: 'mcr.microsoft.com/dotnet/sdk:6.0'
    id: 'Publish Applications'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        mkdir -p published
        for lib in LibA LibB LibC; do
          dotnet publish $lib/$lib.csproj -c Release -o published/$lib
        done

  # Step 5: Create systemd services and startup script with proper indentation
  - name: 'ubuntu'
    id: 'Prepare Systemd'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir systemd
        for lib in LibA LibB LibC; do
          if [ "$lib" == "LibA" ]; then
            PORT=8081
          elif [ "$lib" == "LibB" ]; then
            PORT=8082
          else
            PORT=8083
          fi

          cat <<EOF > systemd/${lib}.service
[Unit]
Description=${lib} Service
After=network.target

[Service]
ExecStart=/usr/bin/dotnet /home/vij1542044/${lib}/${lib}.dll --urls=http://0.0.0.0:${PORT}
WorkingDirectory=/home/vij1542044/${lib}
Restart=always
RestartSec=10
SyslogIdentifier=${lib}
User=root
Environment=DOTNET_ENVIRONMENT=Production

[Install]
WantedBy=multi-user.target
EOF
        done

        cat <<'EOSTARTUP' > startup.sh
#!/bin/bash
sudo apt update && sudo apt install -y dotnet-runtime-6.0

for lib in LibA LibB LibC; do
  mkdir -p /home/vij1542044/$lib
  cp -r published/$lib/* /home/vij1542044/$lib/
  cp systemd/$lib.service /etc/systemd/system/$lib.service
done

systemctl daemon-reexec
systemctl daemon-reload

for lib in LibA LibB LibC; do
  systemctl enable $lib.service
  systemctl start $lib.service
done
EOSTARTUP

        chmod +x startup.sh

  # Step 6: Create VM (if needed, or replace with your existing VM creation logic)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create VM'
    args:
      - compute
      - instances
      - create
      - my-vm-instance
      - --zone=asia-east1-b
      - --machine-type=e2-micro
      - --image-family=debian-11
      - --image-project=debian-cloud
      - --boot-disk-size=20GB

  # Step 7: Copy published files, systemd services and startup script to VM and execute startup.sh
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Copy Files to VM and Run Startup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute scp --recurse published vij1542044@my-vm-instance:/home/vij1542044/ --zone=asia-east1-b --project=onyx-antler-459216-j6
        gcloud compute scp --recurse systemd vij1542044@my-vm-instance:/home/vij1542044/ --zone=asia-east1-b --project=onyx-antler-459216-j6
        gcloud compute scp startup.sh vij1542044@my-vm-instance:/home/vij1542044/startup.sh --zone=asia-east1-b --project=onyx-antler-459216-j6
        gcloud compute ssh vij1542044@my-vm-instance --zone=asia-east1-b --project=onyx-antler-459216-j6 --command="bash /home/vij1542044/startup.sh"

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
